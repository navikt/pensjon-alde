export interface ApiErrorData {
  status: number
  title: string
  message?: string
  detail?: string
  path?: string
  timestamp?: string
}

export function isApiError(error: unknown): error is { data: ApiErrorData } {
  return (
    typeof error === 'object' &&
    error !== null &&
    'data' in error &&
    typeof (error as { data: unknown }).data === 'object' &&
    (error as { data: unknown }).data !== null &&
    typeof (error as { data: { status: unknown } }).data.status === 'number' &&
    typeof (error as { data: { title: unknown } }).data.title === 'string'
  )
}

/**
 * RFC 9457 - Problem Details
 */
export interface ProblemDetails {
  /**
   * A URI reference that identifies the problem type.
   * This URI SHOULD provide human-readable documentation for the problem type.
   */
  type?: string

  /**
   * A short, human-readable summary of the problem type.
   * It SHOULD NOT change for a given problem type (e.g., if the "type" is "out-of-credit",
   * then the "title" might be "You do not have enough credit.").
   */
  title?: string

  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number

  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string

  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * It may or may not yield further information if dereferenced.
   */
  instance?: string
}

export function isProblemDetails(value: unknown): value is ProblemDetails {
  if (typeof value !== 'object' || value === null) {
    return false
  }

  const obj = value as Record<string, unknown>

  return (
    (obj.type === undefined || typeof obj.type === 'string') &&
    (obj.title === undefined || typeof obj.title === 'string') &&
    (obj.status === undefined || typeof obj.status === 'number') &&
    (obj.detail === undefined || typeof obj.detail === 'string') &&
    (obj.instance === undefined || typeof obj.instance === 'string')
  )
}
